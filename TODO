== General TODO / Bug list ==

- Some introduction to the rules of the game for new players.
- "Resume game" feature far from complete.
- Cryptographically secure dice rolling (See below).
- Bug: For some unknown reason variables in remote.js is sometimes not initialized before code is executed.
- Windows "package" for easy deployment on personal machines. This may include writing/adapting a small HTTP server, since bundling Apache/LigHTTPD and PHP seems overkill for the (at the time of writing) extremely simple usage of PHP.
- Adding/removing features to the game, to hopefully improve it and to differentiate it from the commercial game which might have unknown legal claims against Lonely Island. (See below).
- Many race conditions still present (See below).
- No game logic checking, players can screw up the game easily by sending out malicious commands.
- Don't grab the whole file when checking for game state updates.
- Related to the above is to use a specific daemon that "triggers" an event by holding up a HTTP connection and closing it when an event occurs. This should be more efficient than polling if the frequency of updates is small. (But will use up port numbers quickly on the server side...)
- Roll for turn precedence instead of basing it on the order a player joins the game.
- DOS/UNIX line breaks problem, which breaks (at least for me) the unix `patch' utility for patch files generated by svn diff/git diff.
- UI / Layout improvements, for example description of dev cards, draggable dialog boxes, etc.
- Some mechanism to mark end of game, so server can "garbage collect" the room.
- Chat.
- Bigger map for more players.
- More "professional" graphics (at least for the hexes).
- AI


== Cryptographically secure dice rolling without a central server ==

(Note: the writer of this section has absolutely no training in cryptography or computer security. The arguments and proposals below are unlikely to be academically/theoretically sound. However, he personally believes that the system is sufficiently solid for casual purposes.)

To get a roll in which no party can predict the outcome (unless there is prior agreement between all parties), we can require all parties to simutaneously produce a number, then we derive the result by adding up the numbers (modulo 6). However, if this is not done simutaneously, then the last party to produce a number will actually have the absolute say in the final result. We can work around this problem by making dice rolling a two stage process:

  1. All parties create a random NUMBER-STRING pair, with string of considerable length making it infeasible to be brute forced. The parties publish the SHA1 (or any cryptographically secure) hash of the NUMBER-STRING pair, but temporarily keep the NUMBER-STRING pair secret.
  2. After all parties have published their hashes, each party reveals their NUMBER-STRING pair. Unless there is some feasible way of producing collisions for the hash algorithm in question or finding the original NUMBER-STRING pair of a hash, we can assume that no party can forge a NUMBER-STRING pair to his advantage.

  Note that there would be considerable latency if this process was repeated right before every roll. However, we can eliminate the latency by having all parties publish a number of NUMBER-STRING pair hashes in advance (eg. at the beginning of the game), and even publish the actual NUMBER-STRING pairs after a player has ended a turn (and before the next player presses "roll"), since a player gains no advantage in knowing the "roll" result beforehand if he must do a roll before making any other choices in game.



== Known race conditions ==

- Start game <-> Player join:

  #1 Player A creates new game
  #2 Player B joins the game, but Player A yet to be notified
  #3 Player A starts game. Player A sees only 1 player in the game.
  #4 Player A is notified Player B has joined.
  #5 Player B is notified that game has started. Player B sees the events in
	 this order: A joins, B joins, A starts game. Player B sees TWO players in
	 the game. (All subsequent observers also see two).

== Suggested Features ==

(Some do not seem to be very serious/feasible suggestions, but keeping here as a record)

- "Random" land type.
- "Build one settlement" dev card.
- Players can build barracks and send out troops to destroy other settlements

-- Si @ Fri Jan 25 07:00:08 HKT 2008
